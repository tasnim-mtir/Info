{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { Validators } from '@angular/forms';\nlet BlogingComponent = class BlogingComponent {\n  //data:any={Title:\"\",Price:\"\",Quantity:\"\",Description:\"\",Email:\"\",Password:\"\"}\n  constructor(user, router, formBuilder) {\n    this.user = user;\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this.helper = new JwtHelperService();\n    this.data3 = {\n      encrypted_id: \"\",\n      userName: \"\"\n    };\n    const token = localStorage.getItem('token');\n    if (token && !this.helper.isTokenExpired(token)) {\n      const decodedToken = this.helper.decodeToken(token);\n      this.encrypted_id = decodedToken.userId;\n    }\n  }\n  myCustomValidator(control) {\n    const EMAIL_REGEXP = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    // Check if the email is valid using the regular expression\n    const isValid = EMAIL_REGEXP.test(control.value);\n    // Return an object with the error code and message if the email is invalid\n    return isValid ? null : {\n      'invalidEmail': true\n    };\n  }\n  ngOnInit() {\n    this.myForm = this.formBuilder.group({\n      titre: ['', Validators.required],\n      description: ['', Validators.required],\n      image: ['', Validators.required],\n      date: ['', Validators.required],\n      idea: ['', Validators.required]\n    });\n  }\n  addbloges(f) {\n    let data = f.value;\n    this.user.addblogs(data).subscribe({\n      next: () => {\n        this.router.navigate(['/']);\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n  }\n};\nBlogingComponent = __decorate([Component({\n  selector: 'app-bloging',\n  templateUrl: './bloging.component.html',\n  styleUrls: ['./bloging.component.css']\n})], BlogingComponent);\nexport { BlogingComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAASC,gBAAgB,QAAQ,oBAAoB;AAGrD,SAAmCC,UAAU,QAAQ,gBAAgB;AAQ9D,IAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAS3B;EAEAC,YACUC,IAAiB,EACjBC,MAAc,EACdC,WAAwB;IAFxB,SAAI,GAAJF,IAAI;IACJ,WAAM,GAANC,MAAM;IACN,gBAAW,GAAXC,WAAW;IAbrB,WAAM,GAAG,IAAIN,gBAAgB,EAAE;IAM/B,UAAK,GAAE;MAAEO,YAAY,EAAE,EAAE;MAAEC,QAAQ,EAAE;IAAE,CAAG;IAQtC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC7C,IAAIF,KAAK,IAAI,CAAC,IAAI,CAACG,MAAM,CAACC,cAAc,CAACJ,KAAK,CAAC,EAAE;MAC/C,MAAMK,YAAY,GAAG,IAAI,CAACF,MAAM,CAACG,WAAW,CAACN,KAAK,CAAC;MAClD,IAAI,CAACF,YAAY,GAAGO,YAAY,CAACE,MAAM;;EACxC;EAEJC,iBAAiB,CAACC,OAAoB;IACpC,MAAMC,YAAY,GAAG,kDAAkD;IACvE;IACA,MAAMC,OAAO,GAAGD,YAAY,CAACE,IAAI,CAACH,OAAO,CAACI,KAAK,CAAC;IAChD;IACA,OAAOF,OAAO,GAAG,IAAI,GAAG;MAAE,cAAc,EAAE;IAAI,CAAE;EAClD;EAEAG,QAAQ;IAEN,IAAI,CAACC,MAAM,GAAG,IAAI,CAAClB,WAAW,CAACmB,KAAK,CAAC;MACnCC,KAAK,EAAE,CAAC,EAAE,EAAEzB,UAAU,CAAC0B,QAAQ,CAAC;MAChCC,WAAW,EAAE,CAAC,EAAE,EAAE3B,UAAU,CAAC0B,QAAQ,CAAC;MACtCE,KAAK,EAAG,CAAC,EAAE,EAAE5B,UAAU,CAAC0B,QAAQ,CAAC;MACjCG,IAAI,EAAG,CAAC,EAAE,EAAE7B,UAAU,CAAC0B,QAAQ,CAAC;MAChCI,IAAI,EAAE,CAAC,EAAE,EAAE9B,UAAU,CAAC0B,QAAQ;KAC/B,CAAC;EAGJ;EAEAK,SAAS,CAACC,CAAM;IACd,IAAIC,IAAI,GAAGD,CAAC,CAACX,KAAK;IAClB,IAAI,CAAClB,IAAI,CAAC+B,QAAQ,CAACD,IAAI,CAAC,CAACE,SAAS,CAAC;MACjCC,IAAI,EAAE,MAAK;QACT,IAAI,CAAChC,MAAM,CAACiC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;MAC7B,CAAC;MACDC,KAAK,EAAGC,GAAsB,IAAI;QAChCC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MAClB;KACD,CAAC;EACJ;CAED;AAtDYtC,gBAAgB,eAL5BH,SAAS,CAAC;EACT4C,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,0BAA0B;EACvCC,SAAS,EAAE,CAAC,yBAAyB;CACtC,CAAC,GACW3C,gBAAgB,CAsD5B;SAtDYA,gBAAgB","names":["Component","JwtHelperService","Validators","BlogingComponent","constructor","user","router","formBuilder","encrypted_id","userName","token","localStorage","getItem","helper","isTokenExpired","decodedToken","decodeToken","userId","myCustomValidator","control","EMAIL_REGEXP","isValid","test","value","ngOnInit","myForm","group","titre","required","description","image","date","idea","addbloges","f","data","addblogs","subscribe","next","navigate","error","err","console","log","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Eyakr\\Info\\front\\src\\app\\views\\bloging\\bloging\\bloging.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { UserService } from '../../user.service';\nimport { Router } from '@angular/router';\nimport { FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { HttpErrorResponse } from '@angular/common/http';\n\n@Component({\n  selector: 'app-bloging',\n  templateUrl: './bloging.component.html',\n  styleUrls: ['./bloging.component.css']\n})\nexport class BlogingComponent {\n  helper = new JwtHelperService()\n  id: any\n  UserId: any\n  myForm: any;\n  data1: any\n  encrypted_id: any \n  data3= { encrypted_id: \"\" ,userName: \"\" ,}\n\n  //data:any={Title:\"\",Price:\"\",Quantity:\"\",Description:\"\",Email:\"\",Password:\"\"}\n\n  constructor(\n    private user: UserService,\n    private router: Router,\n    private formBuilder: FormBuilder) {\n      const token = localStorage.getItem('token');\n    if (token && !this.helper.isTokenExpired(token)) {\n      const decodedToken = this.helper.decodeToken(token);\n       this.encrypted_id = decodedToken.userId;}\n      }\n\n  myCustomValidator(control: FormControl): { [key: string]: boolean } | null {\n    const EMAIL_REGEXP = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    // Check if the email is valid using the regular expression\n    const isValid = EMAIL_REGEXP.test(control.value);\n    // Return an object with the error code and message if the email is invalid\n    return isValid ? null : { 'invalidEmail': true };\n  }\n\n  ngOnInit(): void {\n       \n    this.myForm = this.formBuilder.group({\n      titre: ['', Validators.required],\n      description: ['', Validators.required],\n      image : ['', Validators.required], \n      date : ['', Validators.required],\n      idea: ['', Validators.required]\n    });\n\n \n  }\n\n  addbloges(f: any) {\n    let data = f.value\n    this.user.addblogs(data).subscribe({\n      next: () => {\n        this.router.navigate(['/'])\n      },\n      error: (err: HttpErrorResponse) => {\n        console.log(err)\n      }\n    })\n  }\n\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}