{"ast":null,"code":"export var PieceRotation;\n(function (PieceRotation) {\n  PieceRotation[PieceRotation[\"DEG_0\"] = 0] = \"DEG_0\";\n  PieceRotation[PieceRotation[\"DEG_90\"] = 1] = \"DEG_90\";\n  PieceRotation[PieceRotation[\"DEG_180\"] = 2] = \"DEG_180\";\n  PieceRotation[PieceRotation[\"DEG_270\"] = 3] = \"DEG_270\";\n})(PieceRotation || (PieceRotation = {}));\nexport var PieceTypes;\n(function (PieceTypes) {\n  PieceTypes[PieceTypes[\"Dot\"] = 1] = \"Dot\";\n  PieceTypes[PieceTypes[\"Box\"] = 2] = \"Box\";\n  PieceTypes[PieceTypes[\"Line\"] = 3] = \"Line\";\n  PieceTypes[PieceTypes[\"T\"] = 4] = \"T\";\n  PieceTypes[PieceTypes[\"L\"] = 5] = \"L\";\n  PieceTypes[PieceTypes[\"Lr\"] = 6] = \"Lr\";\n  PieceTypes[PieceTypes[\"Z\"] = 7] = \"Z\";\n  PieceTypes[PieceTypes[\"S\"] = 8] = \"S\";\n})(PieceTypes || (PieceTypes = {}));\nexport var PieceColors;\n(function (PieceColors) {\n  PieceColors[\"Box\"] = \"color-box\";\n  PieceColors[\"Dot\"] = \"color-dot\";\n  PieceColors[\"Line\"] = \"color-line\";\n  PieceColors[\"T\"] = \"color-t\";\n  PieceColors[\"L\"] = \"color-l\";\n  PieceColors[\"Lr\"] = \"color-lr\";\n  PieceColors[\"Z\"] = \"color-z\";\n  PieceColors[\"S\"] = \"color-s\";\n})(PieceColors || (PieceColors = {}));\nexport class Piece {\n  constructor(x, y, gridSize, maps) {\n    this.color = 'red';\n    this.rotation = PieceRotation.DEG_0;\n    this.map = [[], []];\n    this._lastConfig = null;\n    this._gridSize = gridSize;\n    this.x = x;\n    this.y = y;\n    this._maps = maps;\n    this.map = this._maps[this.rotation];\n  }\n  get positionsOnGrid() {\n    const acc = [];\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.map[row][col]) {\n          const pos = (this.y + row) * this._gridSize.width + this.x + col;\n          if (pos > 0) {\n            acc.push(pos);\n          }\n        }\n      }\n    }\n    return acc;\n  }\n  store() {\n    this._lastConfig = {\n      x: this.x,\n      y: this.y,\n      rotation: this.rotation,\n      map: this.map\n    };\n  }\n  clearStore() {\n    this._lastConfig = null;\n  }\n  revert() {\n    if (this._lastConfig) {\n      for (const x in this._lastConfig) {\n        if (this._lastConfig.hasOwnProperty(x)) {\n          // @ts-ignore\n          this[x] = this._lastConfig[x];\n        }\n      }\n      this._lastConfig = null;\n    }\n  }\n  rotate() {\n    const keys = Object.keys(this._maps);\n    let idx = keys.indexOf(this.rotation.toString());\n    if (idx >= keys.length - 1) {\n      this.rotation = keys[0];\n    } else {\n      this.rotation = keys[++idx];\n    }\n    this.map = this._maps[this.rotation];\n  }\n  moveDown() {\n    this.y++;\n  }\n  moveRight() {\n    this.x++;\n  }\n  moveLeft() {\n    this.x--;\n  }\n  get bottomRow() {\n    return this.y + 3;\n  }\n  get rightCol() {\n    let col = 3;\n    while (col >= 0) {\n      for (let row = 0; row <= 3; row++) {\n        if (this.map[row][col]) {\n          return this.x + col;\n        }\n      }\n      col--;\n    }\n    return 0;\n  }\n  get leftCol() {\n    return this.x;\n  }\n}","map":{"version":3,"mappings":"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","names":["PieceRotation","PieceTypes","PieceColors","Piece","constructor","x","y","gridSize","maps","DEG_0","_gridSize","_maps","map","rotation","positionsOnGrid","acc","row","col","pos","width","push","store","_lastConfig","clearStore","revert","hasOwnProperty","rotate","keys","Object","idx","indexOf","toString","length","moveDown","moveRight","moveLeft","bottomRow","rightCol","leftCol"],"sourceRoot":"","sources":["C:\\Users\\Eyakr\\Info\\front\\ngx-tetris\\src\\lib\\classes\\Piece.ts"],"sourcesContent":["import {GridSize, PieceMap, PieceMaps} from '../definitions';\r\n\r\nexport enum PieceRotation {\r\n    DEG_0 = 0,\r\n    DEG_90 = 1,\r\n    DEG_180 = 2,\r\n    DEG_270 = 3\r\n}\r\n\r\n\r\nexport enum PieceTypes {\r\n    Dot = 1,\r\n    Box = 2,\r\n    Line = 3,\r\n    T = 4,\r\n    L = 5,\r\n    Lr = 6,\r\n    Z = 7,\r\n    S = 8\r\n}\r\n\r\nexport enum PieceColors {\r\n    Box = 'color-box',\r\n    Dot = 'color-dot',\r\n    Line = 'color-line',\r\n    T = 'color-t',\r\n    L = 'color-l',\r\n    Lr = 'color-lr',\r\n    Z = 'color-z',\r\n    S = 'color-s'\r\n}\r\n\r\nexport class Piece {\r\n    color = 'red';\r\n    x: number;\r\n    y: number;\r\n    rotation: PieceRotation = PieceRotation.DEG_0;\r\n\r\n    protected _maps: PieceMaps;\r\n    public map: PieceMap = [\r\n        [], []\r\n    ];\r\n\r\n    protected _gridSize;\r\n    protected _lastConfig: { [key: string]: any } | null = null;\r\n\r\n    constructor(x: number, y: number, gridSize: GridSize, maps: PieceMaps) {\r\n        this._gridSize = gridSize;\r\n        this.x = x;\r\n        this.y = y;\r\n        this._maps = maps;\r\n\r\n        this.map = this._maps[this.rotation];\r\n    }\r\n\r\n    get positionsOnGrid() {\r\n        const acc = [];\r\n        for (let row = 0; row < 4; row++) {\r\n            for (let col = 0; col < 4; col++) {\r\n                if (this.map[row][col]) {\r\n                    const pos = (this.y + row) * this._gridSize.width + this.x + col;\r\n                    if (pos > 0) {\r\n                        acc.push(pos);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return acc;\r\n    }\r\n\r\n    public store() {\r\n        this._lastConfig = {\r\n            x: this.x,\r\n            y: this.y,\r\n            rotation: this.rotation,\r\n            map: this.map\r\n        };\r\n    }\r\n\r\n    public clearStore() {\r\n        this._lastConfig = null;\r\n    }\r\n\r\n    public revert() {\r\n        if (this._lastConfig) {\r\n            for (const x in this._lastConfig) {\r\n                if (this._lastConfig.hasOwnProperty(x)) {\r\n                    // @ts-ignore\r\n                  this[x] = this._lastConfig[x];\r\n                }\r\n            }\r\n\r\n            this._lastConfig = null;\r\n        }\r\n    }\r\n\r\n    public rotate() {\r\n        const keys = Object.keys(this._maps);\r\n        let idx = keys.indexOf(this.rotation.toString());\r\n        if (idx >= keys.length - 1) {\r\n            this.rotation = keys[0] as any;\r\n        } else {\r\n            this.rotation = keys[++idx] as any;\r\n        }\r\n\r\n        this.map = this._maps[this.rotation];\r\n    }\r\n\r\n    public moveDown() {\r\n        this.y++;\r\n    }\r\n\r\n    public moveRight() {\r\n        this.x++;\r\n    }\r\n\r\n    public moveLeft() {\r\n        this.x--;\r\n    }\r\n\r\n    get bottomRow() {\r\n        return this.y + 3;\r\n    }\r\n\r\n    get rightCol() {\r\n        let col = 3;\r\n        while (col >= 0) {\r\n            for (let row = 0; row <= 3; row++) {\r\n                if (this.map[row][col]) {\r\n                    return this.x + col;\r\n                }\r\n            }\r\n            col--;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    get leftCol() {\r\n        return this.x;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}