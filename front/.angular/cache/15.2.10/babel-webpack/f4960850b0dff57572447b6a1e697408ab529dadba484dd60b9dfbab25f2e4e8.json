{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./services/game-manager.service\";\nimport * as i2 from \"./board/board.component\";\nconst GAME_SPEED = 500;\nconst MOVE_DOWN_SPEED = 0.2; // fraction of initial game speed\nexport var GameState;\n(function (GameState) {\n  GameState[GameState[\"Paused\"] = 0] = \"Paused\";\n  GameState[GameState[\"Started\"] = 1] = \"Started\";\n  GameState[GameState[\"Over\"] = 2] = \"Over\";\n})(GameState || (GameState = {}));\nexport class TetrisCoreComponent {\n  constructor(_manager) {\n    this._manager = _manager;\n    this.initialSpeed = GAME_SPEED;\n    this.rotate = false;\n    this.moveLeft = false;\n    this.moveRight = false;\n    this.moveDown = false;\n    this.drop = false;\n    this.start = false;\n    this.stop = false;\n    this.reset = false;\n    this.scoreChanged = new EventEmitter();\n    this.lineCleared = new EventEmitter();\n    this.gameOver = new EventEmitter();\n    this.score = 0;\n    this.state = GameState.Paused;\n    this.gridWidth = 10;\n    this.gridHeight = 20;\n    this.gameOverMessage = 'GameOver';\n    this._moveDownSpeed = GAME_SPEED * MOVE_DOWN_SPEED;\n    this._manager.lineCleared$.subscribe(() => this._onLineCleared());\n    this._manager.gameOver$.subscribe(() => this._onGameOver());\n  }\n  ngOnInit() {\n    this._moveDownSpeed = this.initialSpeed * MOVE_DOWN_SPEED;\n    this._manager.initialize(this.gridWidth, this.gridHeight, this.initialSpeed, this.tileSize);\n    this.grid = this._manager.grid;\n    setInterval(() => {\n      if (this.moveDown) {\n        this._manager.moveDown();\n      }\n    }, this._moveDownSpeed);\n  }\n  ngOnChanges(changes) {\n    if (this._keyPressed(changes['moveLeft'])) {\n      this._manager.moveLeft();\n    } else if (this._keyPressed(changes['moveRight'])) {\n      this._manager.moveRight();\n    } else if (this._keyPressed(changes['drop'])) {\n      this._manager.drop();\n    }\n    if (this._keyPressed(changes['rotate'])) {\n      this._manager.rotate();\n    }\n    if (this._keyPressed(changes['start'])) {\n      this._manager.start();\n    }\n    if (this._keyPressed(changes['stop'])) {\n      this._manager.stop();\n    }\n    if (this._keyPressed(changes['reset'])) {\n      this._manager.reset();\n    }\n  }\n  actionLeft() {\n    this._manager.moveLeft();\n  }\n  actionRight() {\n    this._manager.moveRight();\n  }\n  actionRotate() {\n    this._manager.rotate();\n  }\n  actionDown() {\n    this._manager.moveDown();\n  }\n  actionDrop() {\n    this._manager.drop();\n  }\n  actionReset() {\n    this._manager.reset();\n    this.score = 0;\n    this.scoreChanged.emit(this.score);\n    this.lineCleared.emit(0);\n  }\n  actionStart() {\n    this._manager.start();\n    this.state = GameState.Started;\n    const gameMusic = document.getElementById('gameMusic');\n    if (gameMusic) {\n      gameMusic.play();\n    }\n  }\n  actionStop() {\n    if (this.state === GameState.Started) {\n      this._manager.stop();\n      this.state = GameState.Paused;\n      const gameMusic = document.getElementById('gameMusic');\n      if (gameMusic) {\n        gameMusic.pause();\n      }\n    } else if (this.state === GameState.Paused) {\n      this._manager.start();\n      this.state = GameState.Started;\n      const gameMusic = document.getElementById('gameMusic');\n      if (gameMusic) {\n        gameMusic.play();\n      }\n    }\n  }\n  _keyPressed(key) {\n    return key && key.currentValue && !key.previousValue;\n  }\n  _onLineCleared() {\n    this.score += 1;\n    this.scoreChanged.emit(this.score);\n    this.lineCleared.emit();\n    const gameMusic2 = document.getElementById('gameMusic2');\n    if (gameMusic2) {\n      gameMusic2.loop = false;\n      gameMusic2.play();\n      gameMusic2.onended = () => {\n        gameMusic2.pause();\n      };\n    }\n  }\n  _onGameOver() {\n    this.state = GameState.Over;\n    this.gameOver.emit();\n    const gameMusic = document.getElementById('gameMusic');\n    if (gameMusic) {\n      gameMusic.pause();\n    }\n  }\n  getScore() {\n    return this.score;\n  }\n  static #_ = this.ɵfac = function TetrisCoreComponent_Factory(t) {\n    return new (t || TetrisCoreComponent)(i0.ɵɵdirectiveInject(i1.GameManagerService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TetrisCoreComponent,\n    selectors: [[\"tetris-core\"]],\n    inputs: {\n      tileSize: \"tileSize\",\n      initialSpeed: \"initialSpeed\",\n      rotate: \"rotate\",\n      moveLeft: \"moveLeft\",\n      moveRight: \"moveRight\",\n      moveDown: \"moveDown\",\n      drop: \"drop\",\n      start: \"start\",\n      stop: \"stop\",\n      reset: \"reset\"\n    },\n    outputs: {\n      scoreChanged: \"scoreChanged\",\n      lineCleared: \"lineCleared\",\n      gameOver: \"gameOver\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"grid\"]],\n    template: function TetrisCoreComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"board\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"grid\", ctx.grid);\n      }\n    },\n    dependencies: [i2.BoardComponent],\n    encapsulation: 2\n  });\n}","map":{"version":3,"mappings":"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","names":["EventEmitter","GAME_SPEED","MOVE_DOWN_SPEED","GameState","TetrisCoreComponent","constructor","_manager","Paused","lineCleared$","subscribe","_onLineCleared","gameOver$","_onGameOver","ngOnInit","_moveDownSpeed","initialSpeed","initialize","gridWidth","gridHeight","tileSize","grid","setInterval","moveDown","ngOnChanges","changes","_keyPressed","moveLeft","moveRight","drop","rotate","start","stop","reset","actionLeft","actionRight","actionRotate","actionDown","actionDrop","actionReset","score","scoreChanged","emit","lineCleared","actionStart","state","Started","gameMusic","document","getElementById","play","actionStop","pause","key","currentValue","previousValue","gameMusic2","loop","onended","Over","gameOver","getScore","selectors","inputs","outputs","features","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Users\\Eyakr\\Info\\front\\ngx-tetris\\src\\lib\\tetris-core.component.ts","C:\\Users\\Eyakr\\Info\\front\\ngx-tetris\\src\\lib\\tetris-core.component.html"],"sourcesContent":["import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  Output, SimpleChange,\r\n  SimpleChanges\r\n} from '@angular/core';\r\nimport {GameManagerService, Tile} from './services/game-manager.service';\r\n\r\nconst GAME_SPEED = 500;\r\nconst MOVE_DOWN_SPEED = 0.2; // fraction of initial game speed\r\n\r\nexport enum GameState {\r\n    Paused = 0,\r\n    Started = 1,\r\n    Over = 2\r\n}\r\n\r\n@Component({\r\n    selector: 'tetris-core',\r\n    templateUrl: './tetris-core.component.html',\r\n})\r\nexport class TetrisCoreComponent implements OnInit, OnChanges {\r\n    @Input() tileSize: any;\r\n\r\n    @Input() initialSpeed: number = GAME_SPEED;\r\n    @Input() rotate = false;\r\n    @Input() moveLeft = false;\r\n    @Input() moveRight = false;\r\n    @Input() moveDown = false;\r\n    @Input() drop = false;\r\n    @Input() start = false;\r\n    @Input() stop = false;\r\n    @Input() reset = false;\r\n    @Output() scoreChanged: EventEmitter<number> = new EventEmitter<number>();\r\n    @Output() lineCleared: EventEmitter<any> = new EventEmitter();\r\n    @Output() gameOver: EventEmitter<any> = new EventEmitter();\r\n\r\n    public score: number = 0; \r\n    public grid!: Array<Tile>;\r\n    public state: GameState = GameState.Paused;\r\n\r\n\r\n    gridWidth = 10;\r\n    gridHeight = 20;\r\n    gameOverMessage = 'GameOver'; \r\n\r\n\r\n    private _moveDownSpeed = GAME_SPEED * MOVE_DOWN_SPEED;\r\n\r\n    constructor(private _manager: GameManagerService) {\r\n        this._manager.lineCleared$.subscribe(() => this._onLineCleared());\r\n        this._manager.gameOver$.subscribe(() => this._onGameOver());\r\n    }\r\n\r\n    ngOnInit() {\r\n      this._moveDownSpeed = this.initialSpeed * MOVE_DOWN_SPEED;\r\n\r\n      this._manager.initialize(this.gridWidth, this.gridHeight, this.initialSpeed, this.tileSize);\r\n      this.grid = this._manager.grid;\r\n\r\n      setInterval(() => {\r\n        if (this.moveDown) {\r\n          this._manager.moveDown();\r\n        }\r\n\r\n      }, this._moveDownSpeed);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (this._keyPressed(changes['moveLeft'])) {\r\n            this._manager.moveLeft();\r\n        } else if (this._keyPressed(changes['moveRight'])) {\r\n            this._manager.moveRight();\r\n        } else if (this._keyPressed(changes['drop'])) {\r\n            this._manager.drop();\r\n        }\r\n\r\n        if (this._keyPressed(changes['rotate'])) { this._manager.rotate(); }\r\n        if (this._keyPressed(changes['start']))  { this._manager.start(); }\r\n        if (this._keyPressed(changes['stop']))  { this._manager.stop(); }\r\n        if (this._keyPressed(changes['reset']))  { this._manager.reset(); }\r\n       \r\n    }\r\n    \r\n\r\n    public actionLeft() { this._manager.moveLeft(); }\r\n    public actionRight() { this._manager.moveRight(); }\r\n    public actionRotate() { this._manager.rotate(); }\r\n    public actionDown() { this._manager.moveDown(); }\r\n    public actionDrop() { this._manager.drop(); }\r\n    public actionReset() {    this._manager.reset(); \r\n        this.score = 0; \r\n        this.scoreChanged.emit(this.score); \r\n        this.lineCleared.emit(0); \r\n    }\r\n\r\n    public actionStart() {\r\n        this._manager.start();\r\n        this.state = GameState.Started;\r\n        const gameMusic = document.getElementById('gameMusic') as HTMLAudioElement;\r\n        if (gameMusic) {\r\n            gameMusic.play();\r\n        }\r\n    }\r\n    public actionStop() {\r\n        if (this.state === GameState.Started) {\r\n            this._manager.stop(); \r\n            this.state = GameState.Paused; \r\n            const gameMusic = document.getElementById('gameMusic') as HTMLAudioElement;\r\n            if (gameMusic) {\r\n                gameMusic.pause();\r\n            }\r\n        } else if (this.state === GameState.Paused) {\r\n            this._manager.start(); \r\n            this.state = GameState.Started; \r\n            const gameMusic = document.getElementById('gameMusic') as HTMLAudioElement;\r\n            if (gameMusic) {\r\n                gameMusic.play();\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n    private _keyPressed(key: SimpleChange) {\r\n        return key && key.currentValue && !key.previousValue;\r\n    }\r\n\r\n    private _onLineCleared() {\r\n        this.score += 1;\r\n        this.scoreChanged.emit(this.score); \r\n        this.lineCleared.emit();\r\n        const gameMusic2 = document.getElementById('gameMusic2') as HTMLAudioElement;\r\n        if (gameMusic2) {\r\n            gameMusic2.loop = false; \r\n            gameMusic2.play();\r\n            gameMusic2.onended = () => {\r\n                gameMusic2.pause(); \r\n            };\r\n\r\n        }\r\n    }\r\n\r\n    private _onGameOver() {\r\n        this.state = GameState.Over;\r\n        this.gameOver.emit();\r\n        const gameMusic = document.getElementById('gameMusic') as HTMLAudioElement;\r\n        if (gameMusic) {\r\n            gameMusic.pause();\r\n        }\r\n    }\r\n\r\n    getScore(): number {\r\n        return this.score;\r\n      }\r\n\r\n}\r\n","<board\r\n    [grid]=\"grid\"></board>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}