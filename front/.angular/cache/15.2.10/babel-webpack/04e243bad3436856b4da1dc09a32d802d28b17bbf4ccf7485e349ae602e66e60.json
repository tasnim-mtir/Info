{"ast":null,"code":"import { TileComponent } from \"../tile/tile.component\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/game-manager.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"../tile/tile.component\";\nfunction BoardComponent_tile_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tile\", 1);\n  }\n  if (rf & 2) {\n    const tileData_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"data\", tileData_r1);\n  }\n}\nexport class BoardComponent {\n  constructor(_manager, _elRef) {\n    this._manager = _manager;\n    this._elRef = _elRef;\n  }\n  ngAfterViewInit() {\n    if (this._manager.settings.tileSize) {\n      const bb = this.tile.el.nativeElement.getBoundingClientRect();\n      const TILE_MARGIN = 1; //px\n      const oneTileSpace = bb.width + 2 * TILE_MARGIN;\n      const boardWidth = oneTileSpace * this._manager.elementsInRow;\n      this._elRef.nativeElement.style['width'] = boardWidth + 'px';\n    }\n  }\n  static #_ = this.ɵfac = function BoardComponent_Factory(t) {\n    return new (t || BoardComponent)(i0.ɵɵdirectiveInject(i1.GameManagerService), i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: BoardComponent,\n    selectors: [[\"board\"]],\n    viewQuery: function BoardComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(TileComponent, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tile = _t.first);\n      }\n    },\n    inputs: {\n      grid: \"grid\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"data\", 4, \"ngFor\", \"ngForOf\"], [3, \"data\"]],\n    template: function BoardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, BoardComponent_tile_0_Template, 1, 1, \"tile\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngForOf\", ctx.grid);\n      }\n    },\n    dependencies: [i2.NgForOf, i3.TileComponent],\n    styles: [\"[_nghost-%COMP%] {\\r\\n    width: 290px;\\r\\n    display: block;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL25neC10ZXRyaXMvc3JjL2xpYi9ib2FyZC9ib2FyZC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksWUFBWTtJQUNaLGNBQWM7QUFDbEIiLCJzb3VyY2VzQ29udGVudCI6WyI6aG9zdCB7XHJcbiAgICB3aWR0aDogMjkwcHg7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"mappings":"AAEA,SAAQA,aAAa,QAAO,wBAAwB;;;;;;;ICFpDC,0BAEO;;;;IADHA,kCAAiB;;;ADQrB,OAAM,MAAOC,cAAc;EAKvBC,YACUC,QAA4B,EAC5BC,MAAkB;IADlB,aAAQ,GAARD,QAAQ;IACR,WAAM,GAANC,MAAM;EAGhB;EAEAC,eAAe;IACX,IAAI,IAAI,CAACF,QAAQ,CAACG,QAAQ,CAACC,QAAQ,EAAE;MACjC,MAAMC,EAAE,GAAG,IAAI,CAACC,IAAI,CAACC,EAAE,CAACC,aAAa,CAACC,qBAAqB,EAAE;MAC7D,MAAMC,WAAW,GAAG,CAAC,CAAC,CAAC;MACvB,MAAMC,YAAY,GAAGN,EAAE,CAACO,KAAK,GAAG,CAAC,GAAGF,WAAW;MAC/C,MAAMG,UAAU,GAAGF,YAAY,GAAG,IAAI,CAACX,QAAQ,CAACc,aAAa;MAE7D,IAAI,CAACb,MAAM,CAACO,aAAa,CAACO,KAAK,CAAC,OAAO,CAAC,GAAGF,UAAU,GAAG,IAAI;;EAEpE;EAAC;qBArBQf,cAAc;EAAA;EAAA;UAAdA,cAAc;IAAAkB;IAAAC;MAAA;uBAEZrB,aAAa;;;;;;;;;;;;;;;QCX5BC,iEAEO;;;QAFoBA,kCAAO","names":["TileComponent","i0","BoardComponent","constructor","_manager","_elRef","ngAfterViewInit","settings","tileSize","bb","tile","el","nativeElement","getBoundingClientRect","TILE_MARGIN","oneTileSpace","width","boardWidth","elementsInRow","style","selectors","viewQuery"],"sourceRoot":"","sources":["C:\\Users\\Eyakr\\Info\\front\\ngx-tetris\\src\\lib\\board\\board.component.ts","C:\\Users\\Eyakr\\Info\\front\\ngx-tetris\\src\\lib\\board\\board.component.html"],"sourcesContent":["import {Component, ElementRef, Input, ViewChild} from '@angular/core';\r\nimport {GameManagerService, Tile} from '../services/game-manager.service';\r\nimport {TileComponent} from \"../tile/tile.component\";\r\n\r\n@Component({\r\n    selector: 'board',\r\n    templateUrl: './board.component.html',\r\n    styleUrls: ['./board.component.css'],\r\n})\r\nexport class BoardComponent {\r\n    @Input() grid!: Array<Tile>;\r\n    @ViewChild(TileComponent) tile!: TileComponent;\r\n    public boardWidth!: number;\r\n\r\n    constructor(\r\n      private _manager: GameManagerService,\r\n      private _elRef: ElementRef\r\n    ) {\r\n\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (this._manager.settings.tileSize) {\r\n            const bb = this.tile.el.nativeElement.getBoundingClientRect();\r\n            const TILE_MARGIN = 1; //px\r\n            const oneTileSpace = bb.width + 2 * TILE_MARGIN;\r\n            const boardWidth = oneTileSpace * this._manager.elementsInRow;\r\n\r\n            this._elRef.nativeElement.style['width'] = boardWidth + 'px';\r\n        }\r\n    }\r\n}\r\n","<tile *ngFor=\"let tileData of grid\"\r\n    [data]=\"tileData\">\r\n</tile>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}