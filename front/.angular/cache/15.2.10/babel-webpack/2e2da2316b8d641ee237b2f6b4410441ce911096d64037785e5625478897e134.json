{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet SingupComponent = class SingupComponent {\n  constructor(Service, router, formBuilder) {\n    this.Service = Service;\n    this.router = router;\n    this.formBuilder = formBuilder;\n  }\n  myCustomValidator(control) {\n    const EMAIL_REGEXP = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    // Check if the email is valid using the regular expression\n    const isValid = EMAIL_REGEXP.test(control.value);\n    // Return an object with the error code and message if the email is invalid\n    return isValid ? null : {\n      'invalidEmail': true\n    };\n  }\n  register(f) {\n    let data = f.value;\n    data.Etat = \"Non vérifié\";\n    this.Service.register(data).subscribe(data => {\n      if (data) {\n        this.router.navigate(['/login']).then(() => {\n          Swal.fire({\n            position: 'top-end',\n            icon: 'success',\n            title: 'compte créé avec succès',\n            showConfirmButton: false,\n            timer: 1500\n          });\n        });\n      } else {\n        console.log('Registration failed');\n      }\n    }, err => {\n      console.log(err);\n      this.msg = err.error.msg;\n    });\n  }\n};\nSingupComponent = __decorate([Component({\n  selector: 'app-singup',\n  templateUrl: './singup.component.html',\n  styleUrls: ['./singup.component.css']\n})], SingupComponent);\nexport { SingupComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAOlC,IAAMC,eAAe,GAArB,MAAMA,eAAe;EAK5BC,YAAqBC,OAAoB,EAASC,MAAa,EAAUC,WAAwB;IAA5E,YAAO,GAAPF,OAAO;IAAsB,WAAM,GAANC,MAAM;IAAiB,gBAAW,GAAXC,WAAW;EAAe;EAEnGC,iBAAiB,CAACC,OAAoB;IACpC,MAAMC,YAAY,GAAG,kDAAkD;IAEvE;IACA,MAAMC,OAAO,GAAGD,YAAY,CAACE,IAAI,CAACH,OAAO,CAACI,KAAK,CAAC;IAEhD;IACA,OAAOF,OAAO,GAAG,IAAI,GAAG;MAAE,cAAc,EAAE;IAAI,CAAE;EAAC;EAKjDG,QAAQ,CAACC,CAAK;IACZ,IAAIC,IAAI,GAACD,CAAC,CAACF,KAAK;IAChBG,IAAI,CAACC,IAAI,GAAC,aAAa;IACvB,IAAI,CAACZ,OAAO,CAACS,QAAQ,CAACE,IAAI,CAAC,CAACE,SAAS,CAACF,IAAI,IAAE;MAC1C,IAAGA,IAAI,EAAC;QACN,IAAI,CAACV,MAAM,CAACa,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAACC,IAAI,CAAC,MAAI;UACxCC,IAAI,CAACC,IAAI,CAAC;YACRC,QAAQ,EAAE,SAAS;YACnBC,IAAI,EAAE,SAAS;YACfC,KAAK,EAAE,yBAAyB;YAChCC,iBAAiB,EAAE,KAAK;YACxBC,KAAK,EAAE;WACR,CAAC;QACJ,CAAC,CAAC;OACH,MAAM;QACLC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;;IAEtC,CAAC,EAAEC,GAAG,IAAG;MACPF,OAAO,CAACC,GAAG,CAACC,GAAG,CAAC;MAChB,IAAI,CAACC,GAAG,GAAGD,GAAG,CAACE,KAAK,CAACD,GAAG;IAC1B,CAAC,CAAC;EACJ;CACD;AAzCY5B,eAAe,eAL3BD,SAAS,CAAC;EACT+B,QAAQ,EAAE,YAAY;EACtBC,WAAW,EAAE,yBAAyB;EACtCC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,GACWhC,eAAe,CAyC3B;SAzCYA,eAAe","names":["Component","SingupComponent","constructor","Service","router","formBuilder","myCustomValidator","control","EMAIL_REGEXP","isValid","test","value","register","f","data","Etat","subscribe","navigate","then","Swal","fire","position","icon","title","showConfirmButton","timer","console","log","err","msg","error","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Eyakr\\Info\\front\\src\\app\\views\\singup\\singup\\singup.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-singup',\n  templateUrl: './singup.component.html',\n  styleUrls: ['./singup.component.css']\n})\nexport class SingupComponent {\n  myForm: any;\n\n  msg:any\nf: any;\nconstructor( private Service:UsersService,private router:Router ,private formBuilder: FormBuilder){}\n\nmyCustomValidator(control: FormControl): { [key: string]: boolean } | null {\n  const EMAIL_REGEXP = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n\n  // Check if the email is valid using the regular expression\n  const isValid = EMAIL_REGEXP.test(control.value);\n\n  // Return an object with the error code and message if the email is invalid\n  return isValid ? null : { 'invalidEmail': true };}\n\n\n\n\n  register(f:any){\n    let data=f.value\n    data.Etat=\"Non vérifié\"\n    this.Service.register(data).subscribe(data=>{\n      if(data){\n        this.router.navigate(['/login']).then(()=>{\n          Swal.fire({\n            position: 'top-end',\n            icon: 'success',\n            title: 'compte créé avec succès',\n            showConfirmButton: false,\n            timer: 1500\n          })\n        })\n      } else {\n        console.log('Registration failed');\n      }\n    }, err => {\n      console.log(err);\n      this.msg = err.error.msg;\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}