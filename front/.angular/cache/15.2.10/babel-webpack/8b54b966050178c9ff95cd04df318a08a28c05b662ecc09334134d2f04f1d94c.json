{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.helper = new JwtHelperService();\n    this.refreshTokenUrl = '/api/refreshToken';\n    this.backendLink = 'http://localhost:5000';\n    this.isLoggin = new BehaviorSubject(false);\n    if (localStorage.getItem(\"token\")) {\n      this.isLoggin.next(true);\n    } else {\n      this.isLoggin.next(false);\n    }\n  }\n  login(f) {\n    let data = f.value;\n    this.socket.emit(\"newUser\", data);\n    // First, try to log in the user\n    this.userService.login(data).subscribe({\n      next: response => {\n        this.userService.userLogIn(response.token);\n        this.router.navigate(['/acceuil']);\n        console.log(response);\n      },\n      error: err => {\n        // If login fails, try to log in the monitor\n        console.log(err);\n        this.Mservice.login(data).subscribe({\n          next: response => {\n            this.Mservice.moniteurLogIn(response.token);\n            this.router.navigate(['/moniteur/acceuil']);\n          },\n          error: err => {\n            // If monitor login fails, try to log in the candidate\n            console.log(err);\n            this.Crudservice.login(data).subscribe({\n              next: response => {\n                this.Crudservice.candidatLogIn(response.token);\n                this.router.navigate(['/candidats/home']);\n              },\n              error: err => {\n                // If all logins fail, display an error message\n                console.log(err);\n                this.msg = err.error.msg;\n              }\n            });\n          }\n        });\n      }\n    });\n  }\n  login(data) {\n    return this.http.post(`${this.backendLink}/Login`, data);\n  }\n  register(data) {\n    return this.http.post(`${this.backendLink}/Register`, data);\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,QAAQ,MAAM;AACtC,SAASC,gBAAgB,QAAQ,oBAAoB;;;AAIrD,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAe;IAAf,SAAI,GAAJA,IAAI;IAJxB,WAAM,GAAC,IAAIH,gBAAgB,EAAE;IACrB,oBAAe,GAAG,mBAAmB;IAC7C,gBAAW,GAAC,uBAAuB;IACnC,aAAQ,GAA2B,IAAID,eAAe,CAAE,KAAK,CAAC;IAG7D,IAAGK,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,EAAC;MAC9B,IAAI,CAACC,QAAQ,CAACC,IAAI,CAAC,IAAI,CAAC;KACzB,MAAI;MACH,IAAI,CAACD,QAAQ,CAACC,IAAI,CAAC,KAAK,CAAC;;EAE5B;EACAC,KAAK,CAACC,CAAM;IACX,IAAIC,IAAI,GAAGD,CAAC,CAACE,KAAK;IAClB,IAAI,CAACC,MAAM,CAACC,IAAI,CAAC,SAAS,EAACH,IAAI,CAAC;IAChC;IACA,IAAI,CAACI,WAAW,CAACN,KAAK,CAACE,IAAI,CAAC,CAACK,SAAS,CAAC;MACrCR,IAAI,EAAGS,QAAa,IAAI;QACtB,IAAI,CAACF,WAAW,CAACG,SAAS,CAACD,QAAQ,CAACE,KAAK,CAAC;QAC1C,IAAI,CAACC,MAAM,CAACC,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC;QAClCC,OAAO,CAACC,GAAG,CAACN,QAAQ,CAAC;MACvB,CAAC;MACDO,KAAK,EAAEC,GAAG,IAAG;QACX;QACAH,OAAO,CAACC,GAAG,CAACE,GAAG,CAAC;QAChB,IAAI,CAACC,QAAQ,CAACjB,KAAK,CAACE,IAAI,CAAC,CAACK,SAAS,CAAC;UAClCR,IAAI,EAAGS,QAAa,IAAI;YACtB,IAAI,CAACS,QAAQ,CAACC,aAAa,CAACV,QAAQ,CAACE,KAAK,CAAC;YAC3C,IAAI,CAACC,MAAM,CAACC,QAAQ,CAAC,CAAC,mBAAmB,CAAC,CAAC;UAC7C,CAAC;UACDG,KAAK,EAAEC,GAAG,IAAG;YACX;YACAH,OAAO,CAACC,GAAG,CAACE,GAAG,CAAC;YAChB,IAAI,CAACG,WAAW,CAACnB,KAAK,CAACE,IAAI,CAAC,CAACK,SAAS,CAAC;cACrCR,IAAI,EAAGS,QAAa,IAAI;gBACtB,IAAI,CAACW,WAAW,CAACC,aAAa,CAACZ,QAAQ,CAACE,KAAK,CAAC;gBAC9C,IAAI,CAACC,MAAM,CAACC,QAAQ,CAAC,CAAC,iBAAiB,CAAC,CAAC;cAC3C,CAAC;cACDG,KAAK,EAAEC,GAAG,IAAG;gBACX;gBACAH,OAAO,CAACC,GAAG,CAACE,GAAG,CAAC;gBAChB,IAAI,CAACK,GAAG,GAAGL,GAAG,CAACD,KAAK,CAACM,GAAG;cAC1B;aACD,CAAC;UACJ;SACD,CAAC;MACJ;KACD,CAAC;EACJ;EACCrB,KAAK,CAACE,IAAQ;IACb,OAAO,IAAI,CAACP,IAAI,CAAC2B,IAAI,CAAC,GAAG,IAAI,CAACC,WAAW,QAAQ,EAACrB,IAAI,CAAC;EACzD;EAEAsB,QAAQ,CAACtB,IAAQ;IACf,OAAO,IAAI,CAACP,IAAI,CAAC2B,IAAI,CAAC,GAAG,IAAI,CAACC,WAAW,WAAW,EAACrB,IAAI,CAAC;EAC5D;EAAC;qBAxDUT,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAgC,SAAXhC,WAAW;IAAAiC,YAFV;EAAM","names":["BehaviorSubject","JwtHelperService","UserService","constructor","http","localStorage","getItem","isLoggin","next","login","f","data","value","socket","emit","userService","subscribe","response","userLogIn","token","router","navigate","console","log","error","err","Mservice","moniteurLogIn","Crudservice","candidatLogIn","msg","post","backendLink","register","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Eyakr\\Info\\front\\src\\app\\views\\user.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { JwtHelperService } from '@auth0/angular-jwt';\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  helper=new JwtHelperService()\n  private refreshTokenUrl = '/api/refreshToken';\n  backendLink='http://localhost:5000'\n  isLoggin:BehaviorSubject<boolean>= new BehaviorSubject (false)\n  constructor(private http:HttpClient) {\n    \n   if(localStorage.getItem(\"token\")){\n      this.isLoggin.next(true)\n    }else{\n      this.isLoggin.next(false)\n    }\n   } \n   login(f: any) {\n    let data = f.value; \n    this.socket.emit(\"newUser\",data);\n    // First, try to log in the user\n    this.userService.login(data).subscribe({\n      next: (response: any) => {\n        this.userService.userLogIn(response.token)\n        this.router.navigate(['/acceuil'])\n        console.log(response)\n      },\n      error: err => {\n        // If login fails, try to log in the monitor\n        console.log(err);\n        this.Mservice.login(data).subscribe({\n          next: (response: any) => {\n            this.Mservice.moniteurLogIn(response.token)\n            this.router.navigate(['/moniteur/acceuil'])\n          },\n          error: err => {\n            // If monitor login fails, try to log in the candidate\n            console.log(err);\n            this.Crudservice.login(data).subscribe({\n              next: (response: any) => {\n                this.Crudservice.candidatLogIn(response.token)\n                this.router.navigate(['/candidats/home'])\n              },\n              error: err => {\n                // If all logins fail, display an error message\n                console.log(err);\n                this.msg = err.error.msg;\n              }\n            });\n          }\n        });\n      }\n    });\n  }\n   login(data:any){\n    return this.http.post(`${this.backendLink}/Login`,data)\n  }\n\n  register(data:any){\n    return this.http.post(`${this.backendLink}/Register`,data)\n  } \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}