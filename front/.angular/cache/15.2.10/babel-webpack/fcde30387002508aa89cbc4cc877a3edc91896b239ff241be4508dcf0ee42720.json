{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../user.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\nfunction LoginComponent_div_18_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 25);\n    i0.ɵɵtext(1, \"Entrez votre email!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_18_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 25);\n    i0.ɵɵtext(1, \"Format invalide.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, LoginComponent_div_18_div_1_Template, 2, 0, \"div\", 24);\n    i0.ɵɵtemplate(2, LoginComponent_div_18_div_2_Template, 2, 0, \"div\", 24);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.myForm.get(\"email\").errors.required);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.myForm.controls.email.errors.email);\n  }\n}\nfunction LoginComponent_div_25_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 25);\n    i0.ɵɵtext(1, \"Entrez votre mot de passe\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_25_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 25);\n  }\n}\nfunction LoginComponent_div_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, LoginComponent_div_25_div_1_Template, 2, 0, \"div\", 24);\n    i0.ɵɵtemplate(2, LoginComponent_div_25_div_2_Template, 1, 0, \"div\", 24);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.myForm.controls.password.errors.required);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.myForm.controls.password.errors.minlength);\n  }\n}\nexport class LoginComponent {\n  constructor(userService, router, formBuilder) {\n    this.userService = userService;\n    this.router = router;\n    this.formBuilder = formBuilder;\n  }\n  myCustomValidator(control) {\n    const EMAIL_REGEXP = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    // Check if the email is valid using the regular expression\n    const isValid = EMAIL_REGEXP.test(control.value);\n    // Return an object with the error code and message if the email is invalid\n    return isValid ? null : {\n      'invalidEmail': true\n    };\n  }\n  ngSubmit() {}\n  ngOnInit() {\n    this.myForm = this.formBuilder.group({\n      password: ['', [Validators.required, Validators.minLength(8), Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9]+$')]],\n      email: ['', [Validators.required, Validators.email, this.myCustomValidator]]\n      // other form fields...\n    });\n  }\n\n  login(f) {\n    let data = f.value;\n    this.userService.login(data).subscribe({\n      next: response => {\n        this.userService.userLogIn(response.token);\n        this.router.navigate(['/']);\n        console.log(response);\n      },\n      error: err => {}\n    });\n  }\n  static #_ = this.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.UserService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.FormBuilder));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    decls: 31,\n    vars: 3,\n    consts: [[1, \"vh-100\", 2, \"background-color\", \"#eee\"], [1, \"container\", \"h-100\"], [1, \"row\", \"d-flex\", \"justify-content-center\", \"align-items-center\", \"h-100\"], [1, \"col-lg-12\", \"col-xl-11\"], [1, \"card\", \"text-black\", 2, \"border-radius\", \"25px\"], [1, \"card-body\", \"p-md-5\"], [1, \"row\", \"justify-content-center\"], [1, \"col-md-10\", \"col-lg-6\", \"col-xl-5\", \"order-2\", \"order-lg-1\"], [1, \"text-center\", \"h1\", \"fw-bold\", \"mb-5\", \"mx-1\", \"mx-md-4\", \"mt-4\"], [3, \"formGroup\", \"ngSubmit\"], [\"f\", \"ngForm\"], [1, \"d-flex\", \"flex-row\", \"align-items-center\", \"mb-4\"], [1, \"fas\", \"fa-user\", \"fa-lg\", \"me-3\", \"fa-fw\"], [1, \"form-outline\", \"flex-fill\", \"mb-0\"], [\"type\", \"email\", \"ngModel\", \"\", \"name\", \"email\", \"formControlName\", \"email\", \"placeholder\", \"email\", 1, \"form-control\"], [\"for\", \"form3Example1c\", 1, \"form-label\"], [4, \"ngIf\"], [1, \"fas\", \"fa-key\", \"fa-lg\", \"me-3\", \"fa-fw\"], [\"type\", \"password\", \"type\", \"password\", \"ngModel\", \"\", \"name\", \"password\", \"formControlName\", \"password\", \"id\", \"form3Example4cd\", 1, \"form-control\"], [\"for\", \"form3Example4cd\", 1, \"form-label\"], [1, \"d-flex\", \"justify-content-center\", \"mx-4\", \"mb-3\", \"mb-lg-4\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"btn-lg\"], [1, \"col-md-10\", \"col-lg-6\", \"col-xl-7\", \"d-flex\", \"align-items-center\", \"order-1\", \"order-lg-2\"], [\"src\", \"https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-registration/draw1.webp\", \"alt\", \"Sample image\", 1, \"img-fluid\"], [\"style\", \"color: red;\", 4, \"ngIf\"], [2, \"color\", \"red\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r7 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"section\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"div\", 5)(6, \"div\", 6)(7, \"div\", 7)(8, \"p\", 8);\n        i0.ɵɵtext(9, \"log in\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"form\", 9, 10);\n        i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_10_listener() {\n          i0.ɵɵrestoreView(_r7);\n          const _r0 = i0.ɵɵreference(11);\n          return i0.ɵɵresetView(ctx.login(_r0));\n        });\n        i0.ɵɵelementStart(12, \"div\", 11);\n        i0.ɵɵelement(13, \"i\", 12);\n        i0.ɵɵelementStart(14, \"div\", 13);\n        i0.ɵɵelement(15, \"input\", 14);\n        i0.ɵɵelementStart(16, \"label\", 15);\n        i0.ɵɵtext(17, \"email\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(18, LoginComponent_div_18_Template, 3, 2, \"div\", 16);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(19, \"div\", 11);\n        i0.ɵɵelement(20, \"i\", 17);\n        i0.ɵɵelementStart(21, \"div\", 13);\n        i0.ɵɵelement(22, \"input\", 18);\n        i0.ɵɵelementStart(23, \"label\", 19);\n        i0.ɵɵtext(24, \" password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(25, LoginComponent_div_25_Template, 3, 2, \"div\", 16);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(26, \"div\", 20)(27, \"button\", 21);\n        i0.ɵɵtext(28, \"Register\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(29, \"div\", 22);\n        i0.ɵɵelement(30, \"img\", 23);\n        i0.ɵɵelementEnd()()()()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"formGroup\", ctx.myForm);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngIf\", ctx.myForm.controls.email.errors && (ctx.myForm.controls.email.dirty || ctx.myForm.controls.email.touched));\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngIf\", ctx.myForm.controls.password.errors && (ctx.myForm.controls.password.dirty || ctx.myForm.controls.password.touched));\n      }\n    },\n    dependencies: [i4.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["Validators","i0","LoginComponent","constructor","userService","router","formBuilder","myCustomValidator","control","EMAIL_REGEXP","isValid","test","value","ngSubmit","ngOnInit","myForm","group","password","required","minLength","pattern","email","login","f","data","subscribe","next","response","userLogIn","token","navigate","console","log","error","err","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\Eyakr\\Info\\front\\src\\app\\views\\login\\login\\login.component.ts","C:\\Users\\Eyakr\\Info\\front\\src\\app\\views\\login\\login\\login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { UserService } from '../../user.service';\nimport { Router } from '@angular/router';\nimport { FormBuilder, FormControl, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent  implements  OnInit {\n \n  myForm: any;\n  msg: any;\n  socket: any;\n\n\n  constructor(private userService: UserService,\n     private router: Router,\n      private formBuilder: FormBuilder,\n      ) {}\n      myCustomValidator(control: FormControl): { [key: string]: boolean } | null {\n        const EMAIL_REGEXP = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    \n        // Check if the email is valid using the regular expression\n        const isValid = EMAIL_REGEXP.test(control.value);\n    \n        // Return an object with the error code and message if the email is invalid\n        return isValid ? null : { 'invalidEmail': true };\n      }\n    \n      public ngSubmit() { }\n    \n  ngOnInit(): void {\n    this.myForm = this.formBuilder.group({\n\n      password: ['', [Validators.required, Validators.minLength(8), Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9]+$')]],\n\n      email: ['', [Validators.required, Validators.email, this.myCustomValidator]],\n      // other form fields...\n    });  }\n    login(f: any) {\n      let data = f.value; \n      this.userService.login(data).subscribe({\n        next: (response: any) => {\n          this.userService.userLogIn(response.token)\n          this.router.navigate(['/'])\n          console.log(response)\n        },\n        error: err => {\n          \n            }\n          });\n        }\n    \n    }  \n\n","<section class=\"vh-100\" style=\"background-color: #eee;\">\n  <div class=\"container h-100\">\n    <div class=\"row d-flex justify-content-center align-items-center h-100\">\n      <div class=\"col-lg-12 col-xl-11\">\n        <div class=\"card text-black\" style=\"border-radius: 25px;\">\n          <div class=\"card-body p-md-5\">\n            <div class=\"row justify-content-center\">\n              <div class=\"col-md-10 col-lg-6 col-xl-5 order-2 order-lg-1\">\n\n                <p class=\"text-center h1 fw-bold mb-5 mx-1 mx-md-4 mt-4\">log in</p>\n\n                <form (ngSubmit)=\"login(f)\" #f=ngForm  [formGroup]=\"myForm\" >\n\n                  <div  class=\"d-flex flex-row align-items-center mb-4\">\n                    <i class=\"fas fa-user fa-lg me-3 fa-fw\"></i>\n                    <div class=\"form-outline flex-fill mb-0\">\n                      <input type=\"email\" ngModel name =\"email\" formControlName=\"email\" class=\"form-control\" placeholder=\"email\"  >\n                      <label class=\"form-label\" for=\"form3Example1c\">email</label> \n\n                    <div *ngIf=\"myForm.controls.email.errors && (myForm.controls.email.dirty || myForm.controls.email.touched)\">\n                      <div  style=\"color: red;\"*ngIf=\"myForm.get('email').errors.required\">Entrez votre email!</div>\n                      <div style=\"color: red;\" *ngIf=\"myForm.controls.email.errors.email\">Format invalide.</div>\n                    </div>      \n                    </div>\n                  </div>\n\n                 \n\n                  <div class=\"d-flex flex-row align-items-center mb-4\">\n                    <i class=\"fas fa-key fa-lg me-3 fa-fw\"></i>\n                    <div class=\"form-outline flex-fill mb-0\">\n                      <input type=\"password\" type=\"password\" ngModel name =\"password\" formControlName=\"password\" id=\"form3Example4cd\" class=\"form-control\" />\n                      <label class=\"form-label\" for=\"form3Example4cd\"> password</label> \n                      <div *ngIf=\"myForm.controls.password.errors && (myForm.controls.password.dirty || myForm.controls.password.touched)\">\n                        <div style=\"color: red;\" *ngIf=\"myForm.controls.password.errors.required\">Entrez votre mot de passe</div>\n                         <div style=\"color: red;\" *ngIf=\"myForm.controls.password.errors.minlength\"> </div>\n                      </div>  \n                    </div>\n                  </div>\n\n                 \n\n                  <div class=\"d-flex justify-content-center mx-4 mb-3 mb-lg-4\">\n                    <button  type=\"submit\"  class=\"btn btn-primary btn-lg\">Register</button>\n                  </div>\n\n                </form>\n\n              </div>\n              <div class=\"col-md-10 col-lg-6 col-xl-7 d-flex align-items-center order-1 order-lg-2\">\n\n                <img src=\"https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-registration/draw1.webp\"\n                  class=\"img-fluid\" alt=\"Sample image\">\n\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}