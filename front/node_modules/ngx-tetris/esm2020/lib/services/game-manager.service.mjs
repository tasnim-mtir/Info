import { Injectable } from '@angular/core';
import { PiecesFactory } from '../classes/PiecesFactory';
import { Subject } from 'rxjs/internal/Subject';
import * as i0 from "@angular/core";
const SPAWN_POSITION_X = 4;
const SPAWN_POSITION_Y = -4;
export class Tile {
    constructor() {
        this.solid = false;
        this.color = null;
    }
}
export class GameManagerService {
    constructor() {
        this.settings = {
            tileSize: null
        };
        this._gridSize = { width: 0, height: 0 };
        this._locked = true;
        this._lineCleared = new Subject();
        this._gameOver = new Subject();
        this._keepMovingDown = false;
        this.lineCleared$ = this._lineCleared.asObservable();
        this.gameOver$ = this._gameOver.asObservable();
    }
    get elementsInRow() {
        return this._gridSize.width;
    }
    initialize(width, height, gameSpeed, tileSize) {
        this._gridSize.width = width;
        this._gridSize.height = height;
        this._gameSpeed = gameSpeed;
        this._piecesFactory = new PiecesFactory(this._gridSize);
        if (tileSize) {
            this.settings.tileSize = tileSize;
        }
        this._initializeEmptyBoard();
        this._spawnNewPiece();
        this._drawPiece();
    }
    start() {
        clearInterval(this._gameInterval);
        this._gameInterval = setInterval(() => {
            this._update();
        }, this._gameSpeed);
        this._locked = false;
    }
    stop() {
        this._locked = true;
        clearInterval(this._gameInterval);
    }
    reset() {
        const emptyTile = new Tile();
        for (let pos = 0; pos < this.grid.length; pos++) {
            if (this.grid[pos].color || this.grid[pos].solid) {
                this.__changeCell(pos, emptyTile);
            }
        }
        this._spawnNewPiece();
        this._drawPiece();
    }
    moveLeft() {
        if (this._locked) {
            return;
        }
        this._clearPiece();
        this._piece.store();
        this._piece.moveLeft();
        if (this._collidesLeft()) {
            this._piece.revert();
        }
        this._drawPiece();
    }
    moveRight() {
        if (this._locked) {
            return;
        }
        this._clearPiece();
        this._piece.store();
        this._piece.moveRight();
        if (this._collidesRight()) {
            this._piece.revert();
        }
        this._drawPiece();
    }
    drop() {
        if (this._locked) {
            return;
        }
        this._keepMovingDown = true;
        while (!this._collidesBottom() && this._keepMovingDown) {
            this._update();
        }
    }
    rotate() {
        if (this._locked) {
            return;
        }
        this._clearPiece();
        this._piece.store();
        this._piece.rotate();
        while (this._collidesRight()) {
            this._piece.moveLeft();
            if (this._collidesLeft()) {
                this._piece.revert();
                break;
            }
        }
        this._drawPiece();
    }
    moveDown() {
        this._update();
    }
    _clearFullLines() {
        for (let row = this._gridSize.height - 1; row >= 0; row--) {
            let isFull = true;
            for (let col = 0; col < this._gridSize.width; col++) {
                const pos = row * this._gridSize.width + col;
                if (this.grid[pos].solid === false) {
                    isFull = false;
                    break;
                }
            }
            if (isFull) {
                const emptyRow = Array.apply(null, Array(this._gridSize.width))
                    .map((idx) => new Tile());
                const topPortion = this.grid.slice(0, row * this._gridSize.width);
                this.grid.splice(0, ++row * this._gridSize.width, ...emptyRow.concat(topPortion));
                this._lineCleared.next();
            }
        }
    }
    _update() {
        if (this._locked) {
            return;
        }
        this._locked = true;
        this._piece.revert();
        this._clearPiece();
        this._piece.store();
        this._piece.moveDown();
        if (this._collidesBottom()) {
            this._keepMovingDown = false;
            this._piece.revert();
            this._markSolid();
            this._drawPiece();
            this._clearFullLines();
            this._spawnNewPiece();
            if (this._isGameOver()) {
                this._onGameOver();
                return;
            }
        }
        this._drawPiece();
        this._locked = false;
    }
    _isGameOver() {
        this._piece.store();
        this._piece.moveDown();
        if (this._collidesBottom()) {
            return true;
        }
        this._piece.revert();
        return false;
    }
    _onGameOver() {
        this.stop();
        this._gameOver.next();
    }
    _spawnNewPiece() {
        this._piece = this._piecesFactory.getRandomPiecePiece(SPAWN_POSITION_X, SPAWN_POSITION_Y);
    }
    _initializeEmptyBoard() {
        const cellsCount = this._gridSize.width * this._gridSize.height;
        this.grid = Array.apply(null, Array(cellsCount))
            .map((idx) => new Tile());
    }
    _clearPiece() {
        this._piece.positionsOnGrid
            .forEach((pos) => {
            this.__changeCell(pos, { color: undefined });
        });
    }
    _drawPiece() {
        this._piece.clearStore();
        this._piece.positionsOnGrid
            .forEach((pos) => {
            this.__changeCell(pos, { color: this._piece.color });
        });
    }
    _markSolid() {
        this._piece.positionsOnGrid.forEach((pos) => {
            this.__changeCell(pos, { solid: true });
        });
    }
    __changeCell(pos, data = {}) {
        this.grid[pos] = Object.assign({}, this.grid[pos], data);
    }
    _collidesBottom() {
        if (this._piece.bottomRow >= this._gridSize.height) {
            return true;
        }
        return this.__collides();
    }
    _collidesLeft() {
        if (this._piece.leftCol < 0) {
            return true;
        }
        return this.__collides();
    }
    _collidesRight() {
        if (this._piece.rightCol >= this._gridSize.width) {
            return true;
        }
        return this.__collides();
    }
    __collides() {
        return this._piece.positionsOnGrid
            .some((pos) => {
            if (pos > 0 && this.grid[pos] && this.grid[pos].solid) {
                return true;
            }
            return false;
        });
    }
}
GameManagerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: GameManagerService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
GameManagerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: GameManagerService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: GameManagerService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,