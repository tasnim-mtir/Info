import { Component, EventEmitter, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./services/game-manager.service";
import * as i2 from "./board/board.component";
const GAME_SPEED = 500;
const MOVE_DOWN_SPEED = 0.2; // fraction of initial game speed
export var GameState;
(function (GameState) {
    GameState[GameState["Paused"] = 0] = "Paused";
    GameState[GameState["Started"] = 1] = "Started";
    GameState[GameState["Over"] = 2] = "Over";
})(GameState || (GameState = {}));
export class TetrisCoreComponent {
    constructor(_manager) {
        this._manager = _manager;
        this.initialSpeed = GAME_SPEED;
        this.rotate = false;
        this.moveLeft = false;
        this.moveRight = false;
        this.moveDown = false;
        this.drop = false;
        this.start = false;
        this.stop = false;
        this.reset = false;
        this.lineCleared = new EventEmitter();
        this.gameOver = new EventEmitter();
        this.state = GameState.Paused;
        this.gridWidth = 10;
        this.gridHeight = 20;
        this._moveDownSpeed = GAME_SPEED * MOVE_DOWN_SPEED;
        this._manager.lineCleared$.subscribe(() => this._onLineCleared());
        this._manager.gameOver$.subscribe(() => this._onGameOver());
    }
    ngOnInit() {
        this._moveDownSpeed = this.initialSpeed * MOVE_DOWN_SPEED;
        this._manager.initialize(this.gridWidth, this.gridHeight, this.initialSpeed, this.tileSize);
        this.grid = this._manager.grid;
        setInterval(() => {
            if (this.moveDown) {
                this._manager.moveDown();
            }
        }, this._moveDownSpeed);
    }
    ngOnChanges(changes) {
        if (this._keyPressed(changes['moveLeft'])) {
            this._manager.moveLeft();
        }
        else if (this._keyPressed(changes['moveRight'])) {
            this._manager.moveRight();
        }
        else if (this._keyPressed(changes['drop'])) {
            this._manager.drop();
        }
        if (this._keyPressed(changes['rotate'])) {
            this._manager.rotate();
        }
        if (this._keyPressed(changes['start'])) {
            this._manager.start();
        }
        if (this._keyPressed(changes['stop'])) {
            this._manager.stop();
        }
        if (this._keyPressed(changes['reset'])) {
            this._manager.reset();
        }
    }
    actionLeft() { this._manager.moveLeft(); }
    actionRight() { this._manager.moveRight(); }
    actionRotate() { this._manager.rotate(); }
    actionDown() { this._manager.moveDown(); }
    actionDrop() { this._manager.drop(); }
    actionReset() { this._manager.reset(); }
    actionStart() {
        this._manager.start();
        this.state = GameState.Started;
    }
    actionStop() {
        this._manager.stop();
        this.state = GameState.Paused;
    }
    _keyPressed(key) {
        return key && key.currentValue && !key.previousValue;
    }
    _onLineCleared() {
        this.lineCleared.emit();
    }
    _onGameOver() {
        this.state = GameState.Over;
        this.gameOver.emit();
    }
}
TetrisCoreComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: TetrisCoreComponent, deps: [{ token: i1.GameManagerService }], target: i0.ɵɵFactoryTarget.Component });
TetrisCoreComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.2", type: TetrisCoreComponent, selector: "tetris-core", inputs: { tileSize: "tileSize", initialSpeed: "initialSpeed", rotate: "rotate", moveLeft: "moveLeft", moveRight: "moveRight", moveDown: "moveDown", drop: "drop", start: "start", stop: "stop", reset: "reset" }, outputs: { lineCleared: "lineCleared", gameOver: "gameOver" }, usesOnChanges: true, ngImport: i0, template: "<board\n    [grid]=\"grid\"></board>\n", components: [{ type: i2.BoardComponent, selector: "board", inputs: ["grid"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: TetrisCoreComponent, decorators: [{
            type: Component,
            args: [{ selector: 'tetris-core', template: "<board\n    [grid]=\"grid\"></board>\n" }]
        }], ctorParameters: function () { return [{ type: i1.GameManagerService }]; }, propDecorators: { tileSize: [{
                type: Input
            }], initialSpeed: [{
                type: Input
            }], rotate: [{
                type: Input
            }], moveLeft: [{
                type: Input
            }], moveRight: [{
                type: Input
            }], moveDown: [{
                type: Input
            }], drop: [{
                type: Input
            }], start: [{
                type: Input
            }], stop: [{
                type: Input
            }], reset: [{
                type: Input
            }], lineCleared: [{
                type: Output
            }], gameOver: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,