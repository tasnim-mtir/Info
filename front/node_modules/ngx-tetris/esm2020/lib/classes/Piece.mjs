export var PieceRotation;
(function (PieceRotation) {
    PieceRotation[PieceRotation["DEG_0"] = 0] = "DEG_0";
    PieceRotation[PieceRotation["DEG_90"] = 1] = "DEG_90";
    PieceRotation[PieceRotation["DEG_180"] = 2] = "DEG_180";
    PieceRotation[PieceRotation["DEG_270"] = 3] = "DEG_270";
})(PieceRotation || (PieceRotation = {}));
export var PieceTypes;
(function (PieceTypes) {
    PieceTypes[PieceTypes["Dot"] = 1] = "Dot";
    PieceTypes[PieceTypes["Box"] = 2] = "Box";
    PieceTypes[PieceTypes["Line"] = 3] = "Line";
    PieceTypes[PieceTypes["T"] = 4] = "T";
    PieceTypes[PieceTypes["L"] = 5] = "L";
    PieceTypes[PieceTypes["Lr"] = 6] = "Lr";
    PieceTypes[PieceTypes["Z"] = 7] = "Z";
    PieceTypes[PieceTypes["S"] = 8] = "S";
})(PieceTypes || (PieceTypes = {}));
// picked from https://www.romanzolotarev.com/pico-8-color-palette/
export var PieceColors;
(function (PieceColors) {
    PieceColors["Box"] = "color-box";
    PieceColors["Dot"] = "color-dot";
    PieceColors["Line"] = "color-line";
    PieceColors["T"] = "color-t";
    PieceColors["L"] = "color-l";
    PieceColors["Lr"] = "color-lr";
    PieceColors["Z"] = "color-z";
    PieceColors["S"] = "color-s";
})(PieceColors || (PieceColors = {}));
export class Piece {
    constructor(x, y, gridSize, maps) {
        this.color = 'red';
        this.rotation = PieceRotation.DEG_0;
        this.map = [
            [], []
        ];
        this._lastConfig = null;
        this._gridSize = gridSize;
        this.x = x;
        this.y = y;
        this._maps = maps;
        this.map = this._maps[this.rotation];
    }
    get positionsOnGrid() {
        const acc = [];
        for (let row = 0; row < 4; row++) {
            for (let col = 0; col < 4; col++) {
                if (this.map[row][col]) {
                    const pos = (this.y + row) * this._gridSize.width + this.x + col;
                    if (pos > 0) {
                        acc.push(pos);
                    }
                }
            }
        }
        return acc;
    }
    store() {
        this._lastConfig = {
            x: this.x,
            y: this.y,
            rotation: this.rotation,
            map: this.map
        };
    }
    clearStore() {
        this._lastConfig = null;
    }
    revert() {
        if (this._lastConfig) {
            for (const x in this._lastConfig) {
                if (this._lastConfig.hasOwnProperty(x)) {
                    // @ts-ignore
                    this[x] = this._lastConfig[x];
                }
            }
            this._lastConfig = null;
        }
    }
    rotate() {
        const keys = Object.keys(this._maps);
        let idx = keys.indexOf(this.rotation.toString());
        if (idx >= keys.length - 1) {
            this.rotation = keys[0];
        }
        else {
            this.rotation = keys[++idx];
        }
        this.map = this._maps[this.rotation];
    }
    moveDown() {
        this.y++;
    }
    moveRight() {
        this.x++;
    }
    moveLeft() {
        this.x--;
    }
    get bottomRow() {
        return this.y + 3;
    }
    get rightCol() {
        let col = 3;
        while (col >= 0) {
            for (let row = 0; row <= 3; row++) {
                if (this.map[row][col]) {
                    return this.x + col;
                }
            }
            col--;
        }
        return 0;
    }
    get leftCol() {
        return this.x;
    }
}
//# sourceMappingURL=data:application/json;base64,